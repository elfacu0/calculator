{"version":3,"sources":["entities/Calculator.ts","components/Calculator/CalculatorContainer.tsx","components/Calculator/ResultContainer.tsx","components/Calculator/Expression.tsx","components/Calculator/Result.tsx","components/Calculator/ButtonsContainer.tsx","components/Calculator/ButtonsColumn.tsx","components/Calculator/Button.tsx","components/Calculator/Calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["OPERATORS","Calculator","result","expression","currentTerm","lastDigit","dispatch","action","type","addNegative","addNumber","value","addOperator","removeLastDigit","calculate","reset","this","push","setLastDigit","join","number","includes","isLastDigitOperator","pop","isLastDigitNumber","length","lastTerm","substring","multiplyAndDivide","sum","toString","clearExpression","i","currentTermString","leftHalf","rightHalf","MultiplyAndDivideSign","Number","slice","concat","total","currentNumber","CalculatorContainer","styled","div","ResultContainer","Expression","span","Result","ButtonsContainer","ButtonsColumn","Button","props","operator","useState","CalculatorEntity","calculator","Date","startHoldingTime","setStartHoldingTime","setExpression","setResult","calculatorRef","useRef","useEffect","current","focus","addDigit","getResult","tabIndex","onKeyDown","e","key","handleKeyboardInput","ref","data-testid","onClick","onMouseDown","onMouseUp","getTime","AppWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a2db174.chunk.js","sourcesContent":["export type Actions =\n    | {\n          type: 'addNumber' | 'addOperator' | 'addNegative';\n          value: string;\n      }\n    | { type: 'removeLastDigit' | 'calculate' | 'clearAll' };\n\nconst OPERATORS = ['*', '/', '+'];\n\nexport class Calculator {\n    result: string;\n    expression: string[];\n    currentTerm: string;\n    lastDigit: string;\n\n    constructor() {\n        this.result = '';\n        this.expression = [];\n        this.currentTerm = '';\n        this.lastDigit = '';\n    }\n\n    dispatch = (action: Actions) => {\n        switch (action.type) {\n            case 'addNegative':\n                return this.addNegative();\n            case 'addNumber':\n                return this.addNumber(action.value);\n            case 'addOperator':\n                return this.addOperator(action.value);\n            case 'removeLastDigit':\n                return this.removeLastDigit();\n            case 'calculate':\n                return this.calculate(this.expression);\n            case 'clearAll':\n                return this.reset();\n            default:\n                return '';\n        }\n    };\n\n    addNegative() {\n        if (this.lastDigit !== '-' && this.lastDigit !== '.') {\n            this.currentTerm = '-';\n            this.expression.push(this.currentTerm);\n            this.setLastDigit();\n        }\n        return this.expression.join('');\n    }\n\n    addNumber(number: string) {\n        if (number === '.' && this.currentTerm.includes('.')) {\n            return this.expression.join('');\n        }\n        if (this.isLastDigitOperator() === false) {\n            this.expression.pop();\n        }\n        this.currentTerm += number;\n        this.expression.push(this.currentTerm);\n        this.setLastDigit();\n        return this.expression.join('');\n    }\n\n    addOperator(value: string) {\n        if (this.isLastDigitNumber() === true) {\n            this.expression.push(value);\n            this.currentTerm = '';\n            this.setLastDigit();\n        }\n        return this.expression.join('');\n    }\n\n    removeLastDigit() {\n        if (this.expression.length > 0) {\n            let lastTerm = this.expression.pop() || '';\n            lastTerm = lastTerm.substring(0, lastTerm.length - 1);\n            this.currentTerm = lastTerm;\n            this.setLastDigit();\n            if (this.currentTerm !== '') {\n                this.expression.push(lastTerm);\n            }\n        }\n        return this.expression.join('');\n    }\n\n    calculate(expression: string[]) {\n        while (this.isLastDigitNumber() === false && this.lastDigit !== '') {\n            this.removeLastDigit();\n        }\n        expression = this.multiplyAndDivide(expression);\n        this.result = this.sum(expression).toString();\n        this.clearExpression();\n        return this.result;\n    }\n\n    multiplyAndDivide(expression: string[]) {\n        let currentTerm = 0;\n        let i = 0;\n        let currentTermString = '';\n        let leftHalf = [];\n        let rightHalf = [];\n        const MultiplyAndDivideSign = ['*', '/'];\n        while (i < expression.length - 1) {\n            leftHalf.push(expression[i]);\n            if (MultiplyAndDivideSign.includes(expression[i + 1]) === true) {\n                if (expression[i + 1] === '*') {\n                    currentTerm =\n                        Number(expression[i]) * Number(expression[i + 2]);\n                } else if (expression[i + 1] === '/') {\n                    currentTerm =\n                        Number(expression[i]) / Number(expression[i + 2]);\n                }\n                currentTermString = currentTerm.toString();\n                leftHalf.pop();\n                rightHalf = expression.slice(i + 3, expression.length);\n                expression = leftHalf;\n                leftHalf = [];\n                expression.push(currentTermString);\n                expression = expression.concat(rightHalf);\n                i = -1;\n            }\n            i++;\n        }\n        return expression;\n    }\n\n    sum(expression: string[]) {\n        let total = 0;\n        let currentNumber = 0;\n        for (let i = 0; i < expression.length; i++) {\n            currentNumber = Number(expression[i]);\n            if (OPERATORS.includes(expression[i]) === false) {\n                total += currentNumber;\n            }\n        }\n        return total;\n    }\n\n    isLastDigitOperator() {\n        this.setLastDigit();\n        if (OPERATORS.includes(this.lastDigit) === true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    isLastDigitNumber() {\n        const NUMBERS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n        this.setLastDigit();\n        if (NUMBERS.includes(this.lastDigit) === true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    setLastDigit() {\n        if (this.expression.length > 0) {\n            const lastTerm = this.expression[this.expression.length - 1];\n            this.lastDigit = lastTerm[lastTerm.length - 1];\n        } else {\n            this.lastDigit = '';\n        }\n    }\n\n    clearExpression() {\n        this.expression = [this.result];\n        this.currentTerm = '';\n        this.lastDigit = '';\n    }\n\n    reset() {\n        this.result = '';\n        this.expression = [];\n        this.currentTerm = '';\n        this.lastDigit = '';\n        return '';\n    }\n}\n","import styled from '@emotion/styled';\n\nexport const CalculatorContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 550px;\n    min-width: 320px;\n    width: 35vw;\n    max-width: 700px;\n    &:focus {\n        outline: none;\n    }\n`;\n","import styled from '@emotion/styled';\n\nexport const ResultContainer = styled.div`\n    background-color: #2b292a;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: space-around;\n    padding: 20px;\n    width: 100%;\n    height: 30%;\n    overflow: hidden;\n`;\n","import styled from '@emotion/styled';\n\nexport const Expression = styled.span`\n    color: white;\n    font-size: 28px;\n    height: 50%;\n    white-space: nowrap;\n    text-align-last: end;\n`;\n","import { Expression } from './Expression';\nimport styled from '@emotion/styled';\n\nexport const Result = styled(Expression)`\n    color: lightgray;\n    font-size: 30px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ButtonsContainer = styled.div`\n    background-color: #212123;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-columns: auto auto auto auto;\n`;\n","import styled from '@emotion/styled';\n\nexport const ButtonsColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    width: 100%;\n`;\n","import styled from '@emotion/styled';\n\ntype ButtonProps = {\n    operator?: number;\n};\n\nexport const Button = styled.div<ButtonProps>`\n    background-color: ${(props: ButtonProps) =>\n        props.operator === 1 ? '#193543' : '#343434'};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #e8e8e8;\n    font-size: 26px;\n    border-radius: 5px;\n    margin: 10px;\n    height: 100%;\n    cursor: pointer;\n    &:hover {\n        background-color: #00d4d4;\n    }\n`;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Calculator as CalculatorEntity } from '../../entities/Calculator';\nimport { Actions } from '../../entities/Calculator';\nimport { CalculatorContainer } from './CalculatorContainer';\nimport { ResultContainer } from './ResultContainer';\nimport { Expression } from './Expression';\nimport { Result } from './Result';\nimport { ButtonsContainer } from './ButtonsContainer';\nimport { ButtonsColumn } from './ButtonsColumn';\nimport { Button } from './Button';\n\nexport const Calculator: React.FC = () => {\n    const [calculator] = useState(new CalculatorEntity());\n    const [startHoldingTime, setStartHoldingTime] = useState(new Date());\n    const [expression, setExpression] = useState('');\n    const [result, setResult] = useState('');\n    const calculatorRef = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        if (calculatorRef.current !== null) {\n            calculatorRef.current.focus();\n        }\n    }, []);\n\n    const addDigit = (action: Actions) => {\n        setExpression(calculator.dispatch(action));\n    };\n\n    const getResult = (action: Actions) => {\n        setResult(calculator.dispatch(action));\n        setExpression(calculator.result);\n    };\n\n    const clearAllInput = (action: Actions) => {\n        if (new Date().getTime() - startHoldingTime.getTime() > 200) {\n            setResult(calculator.dispatch(action));\n            setExpression(calculator.result);\n        }\n    };\n\n    const handleKeyboardInput = (e: React.KeyboardEvent) => {\n        const OPERATORS = ['*', '/', '+'];\n        const NUMBERS = ['0', '.', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n        if (NUMBERS.includes(e.key)) {\n            return addDigit({\n                type: 'addNumber',\n                value: e.key,\n            });\n        }\n        if (OPERATORS.includes(e.key)) {\n            return addDigit({\n                type: 'addOperator',\n                value: e.key,\n            });\n        }\n        if (e.key === '-') {\n            return addDigit({\n                type: 'addNegative',\n                value: e.key,\n            });\n        }\n        if (e.key === 'Backspace') {\n            return addDigit({\n                type: 'removeLastDigit',\n            });\n        }\n        if (e.key === 'Enter') {\n            return getResult({\n                type: 'calculate',\n            });\n        }\n    };\n\n    return (\n        <CalculatorContainer\n            tabIndex={0}\n            onKeyDown={(e) => handleKeyboardInput(e)}\n            ref={calculatorRef}\n            data-testid=\"calculator-container\"\n        >\n            <ResultContainer>\n                <Expression data-testid=\"expression\">{expression}</Expression>\n                <Result data-testid=\"result\">{result}</Result>\n            </ResultContainer>\n            <ButtonsContainer>\n                <ButtonsColumn>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '7',\n                            })\n                        }\n                    >\n                        7\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '4',\n                            })\n                        }\n                    >\n                        4\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '1',\n                            })\n                        }\n                    >\n                        1\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '.',\n                            })\n                        }\n                    >\n                        .\n                    </Button>\n                </ButtonsColumn>\n                <ButtonsColumn>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '8',\n                            })\n                        }\n                    >\n                        8\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '5',\n                            })\n                        }\n                    >\n                        5\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '2',\n                            })\n                        }\n                    >\n                        2\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '0',\n                            })\n                        }\n                    >\n                        0\n                    </Button>\n                </ButtonsColumn>\n                <ButtonsColumn>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '9',\n                            })\n                        }\n                    >\n                        9\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '6',\n                            })\n                        }\n                    >\n                        6\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNumber',\n                                value: '3',\n                            })\n                        }\n                    >\n                        3\n                    </Button>\n                    <Button\n                        operator={1}\n                        onClick={() =>\n                            getResult({\n                                type: 'calculate',\n                            })\n                        }\n                    >\n                        =\n                    </Button>\n                </ButtonsColumn>\n                <ButtonsColumn>\n                    <Button\n                        operator={1}\n                        data-testid=\"delete\"\n                        onClick={() => {\n                            addDigit({\n                                type: 'removeLastDigit',\n                            });\n                        }}\n                        onMouseDown={() => setStartHoldingTime(new Date())}\n                        onMouseUp={() => {\n                            clearAllInput({ type: 'clearAll' });\n                        }}\n                    >\n                        DEL\n                    </Button>\n                    <Button\n                        operator={1}\n                        onClick={() => {\n                            addDigit({\n                                type: 'addOperator',\n                                value: '/',\n                            });\n                        }}\n                    >\n                        /\n                    </Button>\n                    <Button\n                        operator={1}\n                        onClick={() =>\n                            addDigit({\n                                type: 'addOperator',\n                                value: '*',\n                            })\n                        }\n                    >\n                        X\n                    </Button>\n                    <Button\n                        operator={1}\n                        onClick={() =>\n                            addDigit({\n                                type: 'addNegative',\n                                value: '-',\n                            })\n                        }\n                    >\n                        -\n                    </Button>\n                    <Button\n                        operator={1}\n                        onClick={() =>\n                            addDigit({\n                                type: 'addOperator',\n                                value: '+',\n                            })\n                        }\n                    >\n                        +\n                    </Button>\n                </ButtonsColumn>\n            </ButtonsContainer>\n        </CalculatorContainer>\n    );\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Calculator } from './components/Calculator/Calculator';\n\nconst AppWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #0f4045;\n`;\n\nfunction App() {\n    return (\n        <AppWrapper>\n            <Calculator />\n        </AppWrapper>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}